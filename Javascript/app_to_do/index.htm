<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Mini Virtual DOM</title>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; }
    button { margin-top: 10px; }
  </style>
</head>
<body>
  <div id="root"></div>
  <button onclick="rerender()">Changer la liste</button>

  <script>
    // Créer un élément virtuel
    function h(type, props, ...children) {
      return { type, props: props || {}, children };
    }

    // Créer un vrai DOM à partir d’un élément virtuel
    function createElement(node) {
      if (typeof node === 'string') {
        return document.createTextNode(node);
      }
      const $el = document.createElement(node.type);

      // Ajouter les attributs
      for (const [key, value] of Object.entries(node.props)) {
        $el.setAttribute(key, value);
      }

      // Ajouter les enfants récursivement
      node.children
        .map(createElement)
        .forEach(child => $el.appendChild(child));

      return $el;
    }

    // Vérifier si deux nœuds ont changé
    function changed(node1, node2) {
      return typeof node1 !== typeof node2 ||
             (typeof node1 === 'string' && node1 !== node2) ||
             node1.type !== node2.type;
    }

    // Mettre à jour le DOM réel en comparant les arbres
    function updateElement($parent, newNode, oldNode, index = 0) {
      const $child = $parent.childNodes[index];
      if (!oldNode) {
        $parent.appendChild(createElement(newNode));
      } else if (!newNode) {
        $parent.removeChild($child);
      } else if (changed(newNode, oldNode)) {
        $parent.replaceChild(createElement(newNode), $child);
      } else if (newNode.type) {
        const newLength = newNode.children.length;
        const oldLength = oldNode.children.length;
        for (let i = 0; i < newLength || i < oldLength; i++) {
          updateElement($child, newNode.children[i], oldNode.children[i], i);
        }
      }
    }

    // État actuel
    let count = 0;
    let oldVDOM;

    // Générer l’arbre virtuel en fonction du compteur
    function view(count) {
      return h('ul', { class: 'list' },
        ...Array.from({ length: count }, (_, i) =>
          h('li', {}, `Élément ${i + 1}`)
        )
      );
    }

    // Fonction de rendu initial et de mise à jour
    function rerender() {
      count = (count + 1) % 6; // boucle de 0 à 5
      const newVDOM = view(count);
      updateElement(root, newVDOM, oldVDOM);
      oldVDOM = newVDOM;
    }

    // Initialisation
    const root = document.getElementById('root');
    oldVDOM = view(count);
    root.appendChild(createElement(oldVDOM));
  </script>
</body>
</html>
